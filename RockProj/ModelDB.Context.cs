//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RockProj
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class RockDBEntities : DbContext
    {
        private static RockDBEntities _context;
        public RockDBEntities()
            : base("name=RockDBEntities")
        {
        }

        public static RockDBEntities GetContext()
        {
            _context = new RockDBEntities();

            return _context;
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Album> Album { get; set; }
        public DbSet<Artist> Artist { get; set; }
        public DbSet<Genre> Genre { get; set; }
        public DbSet<Track> Track { get; set; }
    
        public virtual int AddAlbum(string title, Nullable<int> idArtist)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var idArtistParameter = idArtist.HasValue ?
                new ObjectParameter("IdArtist", idArtist) :
                new ObjectParameter("IdArtist", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAlbum", titleParameter, idArtistParameter);
        }
    
        public virtual int AddArtist(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddArtist", titleParameter);
        }
    
        public virtual int AddGenre(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGenre", titleParameter);
        }
    
        public virtual int AddTrack(string title, Nullable<int> idAlbum, Nullable<int> idGenre, Nullable<int> duration, Nullable<int> size, Nullable<decimal> price)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var idAlbumParameter = idAlbum.HasValue ?
                new ObjectParameter("IdAlbum", idAlbum) :
                new ObjectParameter("IdAlbum", typeof(int));
    
            var idGenreParameter = idGenre.HasValue ?
                new ObjectParameter("IdGenre", idGenre) :
                new ObjectParameter("IdGenre", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrack", titleParameter, idAlbumParameter, idGenreParameter, durationParameter, sizeParameter, priceParameter);
        }
    
        public virtual int DeleteAlbum(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAlbum", idParameter);
        }
    
        public virtual int DeleteArtist(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteArtist", idParameter);
        }
    
        public virtual int DeleteGenre(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGenre", idParameter);
        }
    
        public virtual int DeleteTrack(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTrack", idParameter);
        }
    }
}
